"use strict";(self.webpackChunkpaima_engine_docs=self.webpackChunkpaima_engine_docs||[]).push([[1768],{6745:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var a=n(5893),i=n(1151);const o={},s="Setting Up Database",r={id:"home/database-management/setup",title:"Setting Up Database",description:"Paima Engine requires you to deploy a Postgres database which will be used to store all state of your game node.",source:"@site/docs/home/500-database-management/200-setup.md",sourceDirName:"home/500-database-management",slug:"/home/database-management/setup",permalink:"/ja/home/database-management/setup",draft:!1,unlisted:!1,editUrl:"https://github.com/PaimaStudios/paima-engine-docs/tree/main/docs/home/500-database-management/200-setup.md",tags:[],version:"current",sidebarPosition:200,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/ja/home/database-management/introduction"},next:{title:"Database Snapshotting",permalink:"/ja/home/database-management/snapshotting"}},l={},d=[{value:"Using Docker To Setup A Postgres DB",id:"using-docker-to-setup-a-postgres-db",level:2},{value:"Updating Your init.sql",id:"updating-your-initsql",level:2},{value:"Typescript bindings",id:"typescript-bindings",level:2},{value:"Resetting the Database",id:"resetting-the-database",level:2},{value:"Co-location requirement",id:"co-location-requirement",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"setting-up-database",children:"Setting Up Database"}),"\n",(0,a.jsx)(t.p,{children:"Paima Engine requires you to deploy a Postgres database which will be used to store all state of your game node."}),"\n",(0,a.jsxs)(t.p,{children:["For those already experienced with setting up a Postgres DB, feel free to skip over the majority of this section. One important note however is that each game template also includes a ",(0,a.jsx)(t.code,{children:"init.sql"})," file in the ",(0,a.jsx)(t.code,{children:"/db/migrations/init"})," folder which you should use to initialize the database."]}),"\n",(0,a.jsx)(t.h2,{id:"using-docker-to-setup-a-postgres-db",children:"Using Docker To Setup A Postgres DB"}),"\n",(0,a.jsx)(t.p,{children:"For those who prefer an automated solution, simply proceed with the following steps to have a local Postgres database ready-to-use with your game node:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["Install docker/docker compose on your computer (",(0,a.jsx)(t.a,{href:"https://docs.docker.com/compose/install/",children:"https://docs.docker.com/compose/install/"}),")"]}),"\n",(0,a.jsxs)(t.li,{children:["Go into the root folder of your game code (ie. ",(0,a.jsx)(t.code,{children:"generic-game-template"}),") in your terminal."]}),"\n",(0,a.jsxs)(t.li,{children:["Run ",(0,a.jsx)(t.code,{children:"npm run database:up"})]}),"\n",(0,a.jsxs)(t.li,{children:["Docker compose will automatically download and setup Postgres for you, while also using the ",(0,a.jsx)(t.code,{children:"init.sql"})," from your game code to initialize the DB."]}),"\n",(0,a.jsxs)(t.li,{children:["Your DB will be up and running, and can be closed via ",(0,a.jsx)(t.code,{children:"Ctrl + c"})," like any CLI application."]}),"\n",(0,a.jsxs)(t.li,{children:["Any time you want to bring the DB back online, simply re-run ",(0,a.jsx)(t.code,{children:"npm run database:up"}),"."]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"updating-your-initsql",children:"Updating Your init.sql"}),"\n",(0,a.jsxs)(t.p,{children:["One side note, as you begin writing your game logic (or when building a template) you likely will end up changing the DB schema from the base template you started off with. When you do this, make sure to update the ",(0,a.jsx)(t.code,{children:"init.sql"})," file to properly initialize your DB schema so that future game nodes either you or others deploy for your game will be able to properly work with your game logic."]}),"\n",(0,a.jsx)(t.h2,{id:"typescript-bindings",children:"Typescript bindings"}),"\n",(0,a.jsxs)(t.p,{children:["Templates generally come with bindings pre-generated for you, but you will need to regenerate them yourself if you change the database schema. Learn more ",(0,a.jsx)(t.a,{href:"/ja/home/database-management/ts-bindings",children:"here"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"resetting-the-database",children:"Resetting the Database"}),"\n",(0,a.jsx)(t.p,{children:"The easiest way to reset the database is to reset the docker image entirely. This can be done using"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"npm run database:reset\n"})}),"\n",(0,a.jsx)(t.h2,{id:"co-location-requirement",children:"Co-location requirement"}),"\n",(0,a.jsxs)(t.p,{children:["Your node (Paima Engine instance) and your Database NEED to be on the same machine. This is not only required from a performance perspective, but Paima engine also depends on Postgres ",(0,a.jsx)(t.a,{href:"https://www.postgresql.org/docs/current/sql-listen.html",children:"LISTEN"})," events to manage cache invalidation."]})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>s});var a=n(7294);const i={},o=a.createContext(i);function s(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);