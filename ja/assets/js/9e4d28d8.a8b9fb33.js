"use strict";(self.webpackChunkpaima_engine_docs=self.webpackChunkpaima_engine_docs||[]).push([[7241],{4647:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=t(5893),o=t(1151);const i={},a="Generating Code",s={id:"home/smart-contracts/evm/generating-code",title:"Generating Code",description:"Once you've configured all the contracts for your project, typically the next step is to generate bindings for them for your contract.",source:"@site/docs/home/50-smart-contracts/200-evm/400-generating-code.md",sourceDirName:"home/50-smart-contracts/200-evm",slug:"/home/smart-contracts/evm/generating-code",permalink:"/ja/home/smart-contracts/evm/generating-code",draft:!1,unlisted:!1,editUrl:"https://github.com/PaimaStudios/paima-engine-docs/tree/main/docs/home/50-smart-contracts/200-evm/400-generating-code.md",tags:[],version:"current",sidebarPosition:400,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Deploying a Stateful NFT",permalink:"/ja/home/smart-contracts/evm/deploy-stateful-nft"},next:{title:"Onchain Data Grammar",permalink:"/ja/home/read-write-L2-state/base-format"}},c={},l=[{value:"Option 1) Raw ABI",id:"option-1-raw-abi",level:2},{value:"Option 2) Viem",id:"option-2-viem",level:2},{value:"Option 3) Ethers / Typechain",id:"option-3-ethers--typechain",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"generating-code",children:"Generating Code"}),"\n",(0,r.jsx)(n.p,{children:"Once you've configured all the contracts for your project, typically the next step is to generate bindings for them for your contract."}),"\n",(0,r.jsx)(n.h2,{id:"option-1-raw-abi",children:"Option 1) Raw ABI"}),"\n",(0,r.jsx)(n.p,{children:"This option is best if you're trying to use a code generation we don't have documentation for."}),"\n",(0,r.jsxs)(n.p,{children:["Although ",(0,r.jsx)(n.a,{href:"/ja/home/libraries/evm-contracts/introduction",children:"@paima/evm-contracts"})," comes with ABIs built-in for the Paima smart contracts, generally you only want to generate code for the subset of the Paima contracts you use and then mix in the ABI for any other contract you included in your app."]}),"\n",(0,r.jsxs)(n.p,{children:["To achieve this, Paima's templates include a hardhat config with the ",(0,r.jsx)(n.code,{children:"hardhat-abi-exporter"})," plugin to generate the ABI files (and typescript wrappers as a work around to ",(0,r.jsx)(n.a,{href:"https://github.com/microsoft/TypeScript/issues/32063",children:"this issue"}),") at the root of your project inside ",(0,r.jsx)(n.code,{children:"./contracts/evm/abi"}),"."]}),"\n",(0,r.jsxs)(n.h2,{id:"option-2-viem",children:["Option 2) ",(0,r.jsx)(n.a,{href:"https://viem.sh",children:"Viem"})]}),"\n",(0,r.jsx)(n.p,{children:"Leveraging the ABIs for your contracts generated for you by Paima's hardhat setup, you can use Viem with your project easily"}),"\n",(0,r.jsxs)(n.p,{children:["First, expose the ABI folder in your ",(0,r.jsx)(n.code,{children:"tsconfig.json"})," for any workspace where you need to use it"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "paths": {\n      "@abi/*": ["../contracts/evm/abi/*"]\n    }\n  },\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Then, import the ABI into your project"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import nativeNftSaleAbi from "@abi/@paima/evm-contracts/contracts/NativeNftSale.sol/NativeNftSale";\nimport { createPublicClient, createWalletClient, custom, http } from "viem";\nimport type { PublicClient, WalletClient } from "viem";\nimport { WalletMode, WalletModeMap } from "@paima/sdk/providers";\n\nconst viemChain = \nfunction getClient(): PublicClient {\n  return createPublicClient({\n    chain: viemChain,\n    transport: http(),\n  });\n}\nfunction getWallet(account: string): WalletClient {\n  return createWalletClient({\n    account: account as `0x${string}`,\n    chain: viemChain,\n    transport: custom(\n      WalletModeMap[WalletMode.EvmInjected].getOrThrowProvider().getConnection()\n        .api,\n    ),\n  });\n}\n\nasync function buyNft() {\n  const userAddress = "..."; // get this from Paima.userWalletLogin\n  const nftSaleProxyAddress = "..."; // you can get this from your deployed_addresses.json\n  const { request } = await getClient().simulateContract({\n    account: userAddress as `0x${string}`,\n    address: nftSaleProxyAddress as `0x${string}`,\n    abi: nativeNftSaleAbi,\n    functionName: "buyNft",\n    gas: 800000n, // set as needed\n    gasPrice,\n    value: accountNftPrice, // set the price of your NFT\n    args: [\n        account as `0x${string}`,\n        "" // put the initialization data for your ERC721 mint CDE here\n    ],\n  });\n  const txHash = await getWallet(account).writeContract(request);\n  return txHash;\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"option-3-ethers--typechain",children:"Option 3) Ethers / Typechain"}),"\n",(0,r.jsxs)(n.p,{children:["Inside your ",(0,r.jsx)(n.code,{children:"hardhat.config.ts"}),", add the following in the config:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"typechain: {\n  outDir: './contracts/evm/typechain-types',\n  target: 'ethers-v6',\n  // https://github.com/dethcrypto/TypeChain/issues/849\n  alwaysGenerateOverloads: false,\n},\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Then, include the generated files into the ",(0,r.jsx)(n.code,{children:"tsconfig.json"})," of any workspace where you want to use the typechain files"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "paths": {\n      "@typechain/*": [\n        "../contracts/evm/typechain-types/*"\n      ],\n    }\n  },\n  "include": [\n    "../contracts/evm/typechain-types/**/*",\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Now you can use the generated typechain code directly from your application"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import {\n  AnnotatedMintNft__factory,\n} from "@typechain/index";\nimport type { WalletMode } from "@paima/providers";\nimport { WalletModeMap } from "@paima/providers";\nimport { BrowserProvider, JsonRpcProvider } from "ethers";\nimport type { JsonRpcSigner } from "ethers";\n\nconst getWalletClient = (_account: string): BrowserProvider => {\n  const provider = new BrowserProvider(\n    WalletModeMap[WalletMode.EvmInjected].getOrThrowProvider().getConnection().api,\n  );\n  return provider;\n};\nconst getPublicClient = (): JsonRpcProvider => {\n  return new JsonRpcProvider(\n    CHAIN_URI // comes from your env file\n  );\n};\nexport const getProvider = (account?: string): SignerProvider => {\n  if (account) {\n    return getWalletClient(account);\n  }\n  return getPublicClient();\n};\nexport const getSigner = async (account: string): Promise<JsonRpcSigner> => {\n  return await getWalletClient(account).getSigner();\n};\n\nexport const NftContract = async (account: string) => {\n  const signer = await getSigner(account);\n  return AnnotatedMintNft__factory.connect(\n    NFT, // comes from your env file\n    signer\n  );\n};\n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>a});var r=t(7294);const o={},i=r.createContext(o);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);