"use strict";(self.webpackChunkpaima_engine_docs=self.webpackChunkpaima_engine_docs||[]).push([[9222],{5093:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var s=n(5893),a=n(1151);const l={sidebar_position:1},r="Basics",i={id:"home/multichain-support/wallet-layer/introduction",title:"Basics",description:"Paima, although being EVM based, uses account abstraction to support wallets from multiple different cryptocurrencies. You can learn how to setup the batchers for account abstraction here.",source:"@site/docs/home/700-multichain-support/2-wallet-layer/1-introduction.mdx",sourceDirName:"home/700-multichain-support/2-wallet-layer",slug:"/home/multichain-support/wallet-layer/introduction",permalink:"/ja/home/multichain-support/wallet-layer/introduction",draft:!1,unlisted:!1,editUrl:"https://github.com/PaimaStudios/paima-engine-docs/docs/home/700-multichain-support/2-wallet-layer/1-introduction.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Same L1",permalink:"/ja/home/multichain-support/projected-nfts/same-L1"},next:{title:"Introduction",permalink:"/ja/home/multichain-support/delegate-wallet/introduction"}},o={},c=[{value:"Supported wallets",id:"supported-wallets",level:2},{value:"Supported login modes",id:"supported-login-modes",level:3},{value:"Wallet state",id:"wallet-state",level:3},{value:"Thirdweb support",id:"thirdweb-support",level:3},{value:"Adding a new wallet type",id:"adding-a-new-wallet-type",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"basics",children:"Basics"}),"\n",(0,s.jsxs)(t.p,{children:["Paima, although being EVM based, uses account abstraction to support wallets from multiple different cryptocurrencies. You can learn how to setup the batchers for account abstraction ",(0,s.jsx)(t.a,{href:"/ja/home/setup/paima-bacher",children:"here"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"The wallet layer supports two different modes:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Non-batched mode (self-sequencing). This only supports EVM wallets set to the same network as used for the settlement layer of the app. Transaction are submitted directly by the user (and they cover the transaction fees)"}),"\n",(0,s.jsx)(t.li,{children:"Batched mode. Users sign data, and transactions are crafted by the batcher. This allows users to use the app with different EVM networks or wallets from different cryptocurrencies."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Notably, Paima supports account abstraction through its batcher (similar to how ",(0,s.jsx)(t.a,{href:"https://eips.ethereum.org/EIPS/eip-4337",children:"EIP-4337"})," relies on bundlers)"]}),"\n",(0,s.jsx)(t.h2,{id:"supported-wallets",children:"Supported wallets"}),"\n",(0,s.jsxs)(t.p,{children:["Paima currently supports a few different wallet types (found in ",(0,s.jsx)(t.code,{children:"@paima/providers"}),"):"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Based on"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"EvmInjectedConnector"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.a,{href:"https://eips.ethereum.org/EIPS/eip-1193",children:"EIP1193"})," (used by Metamask and more)",(0,s.jsx)("br",{})," Wallet detection using ",(0,s.jsx)(t.a,{href:"https://eips.ethereum.org/EIPS/eip-6963",children:"EIP6963"})," and ",(0,s.jsx)(t.a,{href:"https://eips.ethereum.org/EIPS/eip-5749",children:"EIP5749"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"EthersConnector"})}),(0,s.jsxs)(t.td,{children:["Ethers.js (",(0,s.jsx)(t.a,{href:"https://www.npmjs.com/package/@ethersproject/abstract-signer",children:"@ethersproject/abstract-signer"}),")"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"PolkadotConnector"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://www.npmjs.com/package/@polkadot/extension-dapp",children:"@polkadot/extension-dapp"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"CardanoConnector"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://cips.cardano.org/cips/cip30",children:"CIP30"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"AlgorandConnector"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://www.npmjs.com/package/@perawallet/connect",children:"@perawallet/connect"})})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"You can get all the different login options for the user with the following utility functions:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"allInjectedWallets"}),": get all injected wallets regardless of cryptocurrency"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"[connectorType].getWalletOptions"}),": get all injected for that specific connector type"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"supported-login-modes",children:"Supported login modes"}),"\n",(0,s.jsxs)(t.p,{children:["Every connector type has different options on how to connect with it that are exposed through the ",(0,s.jsx)(t.code,{children:"userWalletLogin"})," function. We'll cover some of the main configurations here:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"preferBatchedMode"}),": whether or not to use the ",(0,s.jsx)(t.a,{href:"/ja/home/setup/paima-bacher",children:"here"}),". This is optional for EVM wallets"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"checkChainId"}),": defaults to ",(0,s.jsx)(t.code,{children:"true"}),". Change to ",(0,s.jsx)(t.code,{children:"false"})," if your game only requires signing data (and never transactions) as this will make your game compatible with wallets that do not follow ",(0,s.jsx)(t.a,{href:"https://eips.ethereum.org/EIPS/eip-3326",children:"EIP3326"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"InjectionPreference"}),": for wallets, you can either have","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"No preference (Paima will try and pick the best wallet for you)"}),"\n",(0,s.jsx)(t.li,{children:"A name (Paima will try and connect to the wallet with that name)"}),"\n",(0,s.jsx)(t.li,{children:"An external connection (useful if the wallet connection is done through another library and you want to pass the result to Paima)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"setDefault"}),": if you want this wallet to be the default wallet used. This is useful if you want a session key as the default for common actions with a different wallet used to handle valuable assets"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// will connect to any Cardano wallet the user has installed\n// and set it as the default wallet\nPaima.userWalletLogin({ mode: WalletMode.Cardano });\n"})}),"\n",(0,s.jsx)(t.h3,{id:"wallet-state",children:"Wallet state"}),"\n",(0,s.jsx)(t.p,{children:"Once you have wallet(s) connected, there are a few utility functions available:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"checkWalletStatus"}),": checks if an injected wallet is still connected (some wallets like Metamask allow users to switch networks / wallets while using the dApp, and this function will detect these kinds of cases and either resolve them or throw)"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"getActiveAddress"})," / ",(0,s.jsx)(t.code,{children:"getDefaultActiveAddress"}),": get the address for a connection type"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"WalletModeMap"})," to get the underlying API for a wallet. For example, if you want to get the underlying EIP-1193 provider, you can do ",(0,s.jsx)(t.code,{children:"WalletModeMap[WalletMode.EvmInjected].getOrThrowProvider().getConnection().api"})," (prefer this as a replacement for ",(0,s.jsx)(t.code,{children:"window.ethereum"})," your app)"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"You can also access"}),"\n",(0,s.jsx)(t.h3,{id:"thirdweb-support",children:"Thirdweb support"}),"\n",(0,s.jsxs)(t.p,{children:["Thirdweb provides many different ",(0,s.jsx)(t.a,{href:"https://portal.thirdweb.com/wallet/",children:"wallet types"}),". Wallet types that are backed by Ethers can leverage the ",(0,s.jsx)(t.code,{children:"EthersConnector"})]}),"\n",(0,s.jsxs)(t.p,{children:["For example, you can implement a ",(0,s.jsx)(t.a,{href:"https://portal.thirdweb.com/wallet/local-wallet",children:"Local Wallet"})," using the following code"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'async function getLocalWallet() {\n  const wallet = new LocalWallet({\n    // get the chain ID from your .env\n    chain: getChainByChainId(Number.parseInt(process.env.CHAIN_ID))\n  });\n  await wallet.loadOrCreate({\n    strategy: "encryptedJson",\n    password: "", // user password here\n  });\n  await wallet.connect(); // connect the wallet to the application\n  return await wallet.getSigner(); // get the Ethers signer\n}\n\nPaima.userWalletLogin({\n    mode: WalletMode.EvmEthers,\n    connection: {\n        metadata: {\n            name: \'thirdweb.localwallet\',\n            displayName: "Local Wallet"\n        },\n        api: await getLocalWallet(),\n    },\n    preferBatchedMode: true // usually session keys will not hold funds\n});\n'})}),"\n",(0,s.jsx)(t.h2,{id:"adding-a-new-wallet-type",children:"Adding a new wallet type"}),"\n",(0,s.jsx)(t.p,{children:"Adding support for a new cryptocurrency to be used as a wallet in Paima requires modifying the following components:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"@paima/crypto"}),": add the necessary cryptography"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"@paima/providers"}),": add wallet standard support"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"@paima/mw-core"}),": expose the new logic to frontends written with Paima"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"@paima/batcher-address-validator"}),": add support for the new crypto to the batcher system"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>r});var s=n(7294);const a={},l=s.createContext(a);function r(e){const t=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(l.Provider,{value:t},e.children)}}}]);