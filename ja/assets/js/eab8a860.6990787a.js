"use strict";(self.webpackChunkpaima_engine_docs=self.webpackChunkpaima_engine_docs||[]).push([[740],{3905:(e,t,a)=>{a.d(t,{Zo:()=>h,kt:()=>m});var n=a(7294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},h=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,h=i(e,["components","mdxType","originalType","parentName"]),u=p(a),m=s,d=u["".concat(l,".").concat(m)]||u[m]||c[m]||o;return a?n.createElement(d,r(r({ref:t},h),{},{components:a})):n.createElement(d,r({ref:t},h))}));function m(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=a.length,r=new Array(o);r[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,r[1]=i;for(var p=2;p<o;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},640:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=a(7462),s=(a(7294),a(3905));const o={},r="Database Snapshotting",i={unversionedId:"home/Database Management/snapshotting",id:"home/Database Management/snapshotting",title:"Database Snapshotting",description:"Paima will periodically generate local snapshots of the database. This is useful for two main cases:",source:"@site/docs/home/5 - Database Management/1 - snapshotting.md",sourceDirName:"home/5 - Database Management",slug:"/home/Database Management/snapshotting",permalink:"/ja/home/Database Management/snapshotting",draft:!1,editUrl:"https://github.com/PaimaStudios/paima-engine-docs/docs/home/5 - Database Management/1 - snapshotting.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Randomness",permalink:"/ja/home/Randomness/"},next:{title:"Game Versioning",permalink:"/ja/home/Releasing a Game/versioning"}},l={},p=[{value:"Snapshots Storage &amp; Scheduling",id:"snapshots-storage--scheduling",level:2},{value:"Creating The Snapshot",id:"creating-the-snapshot",level:2},{value:"Snapshot Deletion",id:"snapshot-deletion",level:2}],h={toc:p};function c(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"database-snapshotting"},"Database Snapshotting"),(0,s.kt)("p",null,"Paima will periodically generate local snapshots of the database. This is useful for two main cases:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Restoring the database in case a bug causes it to get into a bad state"),(0,s.kt)("li",{parentName:"ol"},"Bootstrapping new deployments of a game quickly")),(0,s.kt)("h2",{id:"snapshots-storage--scheduling"},"Snapshots Storage & Scheduling"),(0,s.kt)("p",null,"Paima Engine Runtime will automatically create/use a ",(0,s.kt)("inlineCode",{parentName:"p"},"snapshots")," folder. On startup, the runtime will check the snapshots folder and note the block height when the last snapshot was taken (by reading the file names, which are following the ",(0,s.kt)("inlineCode",{parentName:"p"},"paima-snapshot-X")," standard, where ",(0,s.kt)("inlineCode",{parentName:"p"},"X")," is the block height that the snapshot was taken at). If no snapshot exists, then a snapshot is created at that point."),(0,s.kt)("p",null,"Snapshots are made based on the latest block height stored in the game's state machine. Notably, snapshots are made every ",(0,s.kt)("inlineCode",{parentName:"p"},"21600")," blocks AFTER the state machine has been updated for that block number."),(0,s.kt)("h2",{id:"creating-the-snapshot"},"Creating The Snapshot"),(0,s.kt)("p",null,"We will be using ",(0,s.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/app-pgdump.html"},"pg_dump"),' to create the snapshots because "it makes consistent backups even if the database is being used concurrently."'),(0,s.kt)("p",null,"You can find a pretty straightforward set of instructions for initiating the snapshots by following ",(0,s.kt)("a",{parentName:"p",href:"https://soshace.com/automated-postgresql-backups-with-nodejs-and-bash/"},"this guide"),' all the way up until "compressing the archive" (we will want to do compression).'),(0,s.kt)("h2",{id:"snapshot-deletion"},"Snapshot Deletion"),(0,s.kt)("p",null,"Only 2 snapshots should be kept, thus when a new snapshot is created the runtime should check how many snapshots exist in the folder. If there are 3, then the oldest snapshot must be deleted."))}c.isMDXComponent=!0}}]);