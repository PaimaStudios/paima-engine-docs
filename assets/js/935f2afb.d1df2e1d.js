"use strict";(self.webpackChunkpaima_engine_docs=self.webpackChunkpaima_engine_docs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"What is Paima Engine?","href":"/","docId":"home/what-is-paima-engine"},{"type":"category","label":"Setting Up Your Environment","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"How To Use Paima Engine","href":"/home/Setting Up Your Environment/how-to-use-paima-engine","docId":"home/Setting Up Your Environment/how-to-use-paima-engine"},{"type":"link","label":"Deploying The Paima L2 Smart Contract","href":"/home/Setting Up Your Environment/deploying-l2-smart-contract","docId":"home/Setting Up Your Environment/deploying-l2-smart-contract"},{"type":"link","label":"Deploying Your Own Stateful NFT Contract","href":"/home/Setting Up Your Environment/deploying-your-stateful-nft","docId":"home/Setting Up Your Environment/deploying-your-stateful-nft"},{"type":"link","label":"Environment Configuration Variables","href":"/home/Setting Up Your Environment/environment-config-values","docId":"home/Setting Up Your Environment/environment-config-values"},{"type":"link","label":"Paima Batcher","href":"/home/Setting Up Your Environment/paima-bacher","docId":"home/Setting Up Your Environment/paima-bacher"}]},{"type":"category","label":"Read & Write L2 State","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Read and Write to L2 state","href":"/home/Read & Write L2 State/base-format","docId":"home/Read & Write L2 State/base-format"},{"type":"link","label":"Sequential State Identifier","href":"/home/Read & Write L2 State/parallelism","docId":"home/Read & Write L2 State/parallelism"},{"type":"link","label":"Error Handling","href":"/home/Read & Write L2 State/error-handling","docId":"home/Read & Write L2 State/error-handling"},{"type":"link","label":"Posting Test Game Inputs To L2 Contract","href":"/home/Read & Write L2 State/posting-test-game-inputs","docId":"home/Read & Write L2 State/posting-test-game-inputs"},{"type":"link","label":"Batched mode","href":"/home/Read & Write L2 State/batched-mode","docId":"home/Read & Write L2 State/batched-mode"},{"type":"link","label":"Replay protection","href":"/home/Read & Write L2 State/replay-protection","docId":"home/Read & Write L2 State/replay-protection"},{"type":"link","label":"Auto-signing for apps","href":"/home/Read & Write L2 State/autosign","docId":"home/Read & Write L2 State/autosign"}]},{"type":"category","label":"Reacting to events","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Scheduling Events and Timers","href":"/home/Reacting to events/scheduled-events","docId":"home/Reacting to events/scheduled-events"},{"type":"link","label":"Chain Data Extensions","href":"/home/Reacting to events/chain-data-extensions","docId":"home/Reacting to events/chain-data-extensions"}]},{"type":"link","label":"Paima Game Templates","href":"https://github.com/PaimaStudios/paima-game-templates"},{"type":"link","label":"Paima Studios Website","href":"https://paimastudios.com"}]},"docs":{"home/Reacting to events/chain-data-extensions":{"id":"home/Reacting to events/chain-data-extensions","title":"Chain Data Extensions","description":"When you are looking to add deep blockchain integration to your game, you will likely be interested in accessing information about ownership of ERC721s (NFTs) or a wallet\'s balance of ERC20 tokens for example. Paima Engine enables this by automatically doing the heavy work for you via a feature called Chain Data Extensions. CDEs allow you to read data trustlessly from the underlying L1.","sidebar":"tutorialSidebar"},"home/Reacting to events/scheduled-events":{"id":"home/Reacting to events/scheduled-events","title":"Scheduling Events and Timers","description":"Games heavily rely on passive time to trigger events, such as limits on the length of a match or the duration of status effects. Paima supports these through a generic system called scheduledData that keeps track of which inputs (that conform to your app\'s grammar) to trigger at which block height (which is used as a proxy for time).","sidebar":"tutorialSidebar"},"home/Read & Write L2 State/autosign":{"id":"home/Read & Write L2 State/autosign","title":"Auto-signing for apps","description":"Note: wallets that use this feature are still in development","sidebar":"tutorialSidebar"},"home/Read & Write L2 State/base-format":{"id":"home/Read & Write L2 State/base-format","title":"Read and Write to L2 state","description":"To be a rollup, Paima state has to eventually be written to the L1. As a sovereign rollup, the way the data is stored is fairly simple (calling a contract function that simply emits its input as an event) and we provide a way to generate a grammar for this data.","sidebar":"tutorialSidebar"},"home/Read & Write L2 State/batched-mode":{"id":"home/Read & Write L2 State/batched-mode","title":"Batched mode","description":"Paima supports two different modes for inputs:","sidebar":"tutorialSidebar"},"home/Read & Write L2 State/error-handling":{"id":"home/Read & Write L2 State/error-handling","title":"Error Handling","description":"Errors are unavoidable. Notably, be sure to take into accounts the following error types:","sidebar":"tutorialSidebar"},"home/Read & Write L2 State/parallelism":{"id":"home/Read & Write L2 State/parallelism","title":"Sequential State Identifier","description":"By default, updates to Paima state may be applied in parallel. This is powerful as it allows different matches played by different players to be run in parallel. However, moves by players in the same lobby need to be made sequential.","sidebar":"tutorialSidebar"},"home/Read & Write L2 State/posting-test-game-inputs":{"id":"home/Read & Write L2 State/posting-test-game-inputs","title":"Posting Test Game Inputs To L2 Contract","description":"Once you have the Paima L2 contract deployed for your game together with your game node up and running, you will inevitably want to test sending game inputs to the blockchain","sidebar":"tutorialSidebar"},"home/Read & Write L2 State/replay-protection":{"id":"home/Read & Write L2 State/replay-protection","title":"Replay protection","description":"Given that games made with Paima Engine are technically \\"open\\" (meaning anyone can submit valid game input), one thing which we need to look out for is replaying attacks. Replaying attacks are situations classically in blockchains (but liable to any openly accessible state machine) where a previous valid input is resubmitted to the state machine/blockchain. Usually this is done by bad actors, and can cause various issues.","sidebar":"tutorialSidebar"},"home/Setting Up Your Environment/deploying-l2-smart-contract":{"id":"home/Setting Up Your Environment/deploying-l2-smart-contract","title":"Deploying The Paima L2 Smart Contract","description":"The Paima L2 Contract is built for developers to deploy their own game as an L2 which seamlessly works with Paima Engine.","sidebar":"tutorialSidebar"},"home/Setting Up Your Environment/deploying-your-stateful-nft":{"id":"home/Setting Up Your Environment/deploying-your-stateful-nft","title":"Deploying Your Own Stateful NFT Contract","description":"Paima Engine supports both classical ERC721 NFT contracts and Paima Extended ERC721 NFT contracts for Stateful NFTs.","sidebar":"tutorialSidebar"},"home/Setting Up Your Environment/environment-config-values":{"id":"home/Setting Up Your Environment/environment-config-values","title":"Environment Configuration Variables","description":"The following is a list of possible environment variables that can be configured for your project. These variables are read in the ENV class, located in paima-sdk/paima-utils/config.js. Please refer to that file for more information on default values.","sidebar":"tutorialSidebar"},"home/Setting Up Your Environment/how-to-use-paima-engine":{"id":"home/Setting Up Your Environment/how-to-use-paima-engine","title":"How To Use Paima Engine","description":"Paima Engine is as an all-in-one batteries-included executable which provides you with everything you need to get started writing your own trustless Web3 game.","sidebar":"tutorialSidebar"},"home/Setting Up Your Environment/paima-bacher":{"id":"home/Setting Up Your Environment/paima-bacher","title":"Paima Batcher","description":"Paima Batcher is the first key component of the Paima Whirlpool infrastructure which enables cross-chain play (via account abstraction layer), automatically paying transaction fees for users, and decreasing overall fees by batching many game inputs together.","sidebar":"tutorialSidebar"},"home/what-is-paima-engine":{"id":"home/what-is-paima-engine","title":"What is Paima Engine?","description":"Paima is a Web3 Engine optimized for games, gamification and autonomous worlds that allows building web3 applications in just days","sidebar":"tutorialSidebar"}}}')}}]);