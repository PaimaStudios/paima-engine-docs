"use strict";(self.webpackChunkpaima_engine_docs=self.webpackChunkpaima_engine_docs||[]).push([[9064],{2883:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var i=t(5893),a=t(1151);const s={title:"prc-1\uff1aPaima Achievement Interface",description:"Interface for sharing in-game achievements.",author:"seba@paimastudios.com, edward@paimastudios.com, tad@paimastudios.com",status:"open",created:new Date("2023-11-08T00:00:00.000Z")},r=void 0,c={id:"home/PRCs/prc-1",title:"prc-1\uff1aPaima Achievement Interface",description:"Interface for sharing in-game achievements.",source:"@site/docs/home/20000-PRCs/prc-1.md",sourceDirName:"home/20000-PRCs",slug:"/home/PRCs/prc-1",permalink:"/home/PRCs/prc-1",draft:!1,unlisted:!1,editUrl:"https://github.com/PaimaStudios/paima-engine-docs/tree/main/docs/home/20000-PRCs/prc-1.md",tags:[],version:"current",frontMatter:{title:"prc-1\uff1aPaima Achievement Interface",description:"Interface for sharing in-game achievements.",author:"seba@paimastudios.com, edward@paimastudios.com, tad@paimastudios.com",status:"open",created:"2023-11-08T00:00:00.000Z"},sidebar:"tutorialSidebar",previous:{title:"Hardhat task list",permalink:"/home/libraries/evm-contracts/hardhat-tasks"},next:{title:"prc-2\uff1aPaima Hololocker Interface",permalink:"/home/PRCs/prc-2"}},o={},l=[{value:"Abstract",id:"abstract",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Format",id:"format",level:2},{value:"HTTP",id:"http",level:3},{value:"Response Interfaces",id:"response-interfaces",level:3},{value:"Specification",id:"specification",level:2},{value:"Get All Available Achievements",id:"get-all-available-achievements",level:3},{value:"Get completed Achievements for Wallet or Token",id:"get-completed-achievements-for-wallet-or-token",level:3},{value:"Reference implementation",id:"reference-implementation",level:3},{value:"Copyright",id:"copyright",level:3}];function d(e){const n={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"abstract",children:"Abstract"}),"\n",(0,i.jsx)(n.p,{children:"An open cross-game standard achievement specification to gamify on-chain participation.\nThis specification allows interaction through standard HTTP methods."}),"\n",(0,i.jsx)(n.h2,{id:"motivation",children:"Motivation"}),"\n",(0,i.jsx)(n.p,{children:"Most games have an achievement system, but they are not compatible: vendors and tools have to be adapted to each game. By implementing this standard, developers spend no or less time implementing the format itself, vendors can use the format for gamification apps, explorers, prizes, etc.  This open-specification does not depend on any specific platform game host, technology, or language, and can be completely self-hosted."}),"\n",(0,i.jsx)(n.p,{children:"The achievement content is easily indexable for games and API consumers, in a recognizable format, allowing caching and generating useful tools for end users."}),"\n",(0,i.jsx)(n.p,{children:"This achievement system can be used by the target game itself for unlocking functionalities such as opening new areas, triggering game progress, or giving away prizes. Third parties may also consume API to expand on its actions, which are compatible with on-chain games."}),"\n",(0,i.jsx)(n.h2,{id:"format",children:"Format"}),"\n",(0,i.jsx)(n.h3,{id:"http",children:"HTTP"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Network calls are done to any game node via HTTP to ",(0,i.jsx)(n.code,{children:"BASE_URL"})]}),"\n",(0,i.jsxs)(n.li,{children:["All network requests are ",(0,i.jsx)(n.code,{children:"Method GET"})]}),"\n",(0,i.jsxs)(n.li,{children:["All responses ContentType is ",(0,i.jsx)(n.code,{children:"application/json"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Standard HTTP codes"})," are used for status. E.g., 200 OK, 500 Internal Server Error, 404 Not Found, etc."]}),"\n",(0,i.jsx)(n.li,{children:"Request Accept-Language header with RFC 7231 content may be used to request the content in a specific language."}),"\n",(0,i.jsx)(n.li,{children:"Response Content-Language header with RFC 7231 shall be used to inform the client of the language of the content."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"response-interfaces",children:"Response Interfaces"}),"\n",(0,i.jsx)(n.p,{children:"General Game Info"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"interface Game {\n  id: string             // Game ID\n  name?: string          // Optional Game Name\n  version?: string       // Optional Game Version\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Data Validity\nFor cross-game on-chain interoperability, this field allows the requester to confirm when the data is valid, and which is the reference blockchain."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"interface Validity {\n  block: number;         // Data Block height (0 always valid)\n  caip2: string;         // CAIP-2 blockchain identifier \n  time: string;          // Optional Date ISO8601 YYYY-MM-DDTHH:mm:ss.sssZ\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Player Info"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"interface Player {     \n  wallet:                // e.g., addr1234... or 0x1234..,\n  walletType?: 'cardano' | 'evm' | 'polkadot' | 'algorand' | string  // (Optional) Wallet-type\n  userId?: string;       // (Optional) User ID for a specific player account.\n                         // This value should be immutable and define a specific account,\n                         // as the wallet might be migrated or updated.\n  userName?: string;     // (Optional) Player Display Name\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"specification",children:"Specification"}),"\n",(0,i.jsx)(n.h3,{id:"get-all-available-achievements",children:"Get All Available Achievements"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"{BASE_URL}/achievements/public/list"})}),"\n",(0,i.jsxs)(n.p,{children:["Optional: Subset of achievements by category\n",(0,i.jsx)(n.code,{children:"{BASE_URL}/achievements/public/list?category=Silver"})]}),"\n",(0,i.jsxs)(n.p,{children:["Optional: Subset of active achievements\n",(0,i.jsx)(n.code,{children:"{BASE_URL}/achievements/public/list?isActive=true"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"interface AchievementPublicList extends Game, Validity {\n    achievements: {\n      name: string;                     // Unique Achievement String\n      score?: number;                   // Optional: Relative Value of the Achievement\n      category?: string;                // Optional: 'Gold' | 'Diamond' | 'Beginner' | 'Advanced' | 'Vendor'\n      percentCompleted?: number         // Percent of players that have unlocked the achievement \n      isActive: boolean                 // If achievement can be unlocked at the time. \n      displayName: string;              // Achievement Display Name\n      description: string               // Achievement Description\n      spoiler?: 'all' | 'description';  // Hide entire achievement or description if not completed\n      iconURI?: string;                 // Optional Icon for Achievement\n      iconGreyURI?: string;             // Optional Icon for locked Achievement\n      startDate?: string                // Optional Date ISO8601 YYYY-MM-DDTHH:mm:ss.sssZ\n      endDate?: string                  // Optional Date ISO8601 YYYY-MM-DDTHH:mm:ss.sssZ\n    }[];\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"get-completed-achievements-for-wallet-or-token",children:"Get completed Achievements for Wallet or Token"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"{BASE_URL}/achievements/wallet/:wallet"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"wallet: Wallet address"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"{BASE_URL}/achievements/erc/:erc/:cde/:token_id"}),(0,i.jsx)(n.br,{}),"\n","e.g., /achievements/erc/erc721/cards/20"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"erc: Any supported ERC standard by the game, such as erc721 or erc6551."}),"\n",(0,i.jsx)(n.li,{children:"cde: Chain Data Extension name, can be used by the game to track and identify the contract."}),"\n",(0,i.jsx)(n.li,{children:"token_id: Unique token id defined by the ERC standard."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Optional subset of achievements by name",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.code,{children:"{BASE_URL}/achievements/wallet/:wallet?name=start_game,end_game,defeat_red_dragon"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"interface PlayerAchievements extends Validity, Player {\n  completed: number;                    // Total number of completed achievements for the game\n  achievements: {\n    name: string;                       // Unique Achievement String\n    completed: boolean;                 // Is Achievement completed\n    completedDate?: Date;               // Completed Date ISO8601 YYYY-MM-DDTHH:mm:ss.sssZ\n    completedRate?: {                   // If achievement has incremental progress\n      progress: number,                 // Current Progress\n      total: number                     // Total Progress\n    }\n  }[];\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"reference-implementation",children:"Reference implementation"}),"\n",(0,i.jsx)(n.h3,{id:"copyright",children:"Copyright"}),"\n",(0,i.jsxs)(n.p,{children:["Copyright and related rights waived via ",(0,i.jsx)(n.a,{href:"https://github.com/PaimaStudios/PRC/blob/main/LICENSE.md",children:"CC0"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>r});var i=t(7294);const a={},s=i.createContext(a);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);