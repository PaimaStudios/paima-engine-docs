"use strict";(self.webpackChunkpaima_engine_docs=self.webpackChunkpaima_engine_docs||[]).push([[5434],{2474:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>m});var i=t(5893),a=t(1151);const s={},r="Achievements",o={id:"home/game-node-api/achievements",title:"Achievements",description:"[PRC-1] defines a standard API for Paima Engine game nodes to serve achievement",source:"@site/docs/home/350-game-node-api/2-achievements.md",sourceDirName:"home/350-game-node-api",slug:"/home/game-node-api/achievements",permalink:"/home/game-node-api/achievements",draft:!1,unlisted:!1,editUrl:"https://github.com/PaimaStudios/paima-engine-docs/tree/main/docs/home/350-game-node-api/2-achievements.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Basic Concepts",permalink:"/home/game-node-api/introduction"},next:{title:"Randomness",permalink:"/home/randomness/"}},c={},m=[{value:"Achievement metadata",id:"achievement-metadata",level:2},{value:"Achievement progress",id:"achievement-progress",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"achievements",children:"Achievements"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"/home/PRCs/prc-1",children:"PRC-1"})," defines a standard API for Paima Engine game nodes to serve achievement\nmetadata and progress. Paima Engine itself includes an implementation of this\nAPI that only requires your game to export an achivement list and submit SQL\nupdates to set player progress."]}),"\n",(0,i.jsx)(n.h2,{id:"achievement-metadata",children:"Achievement metadata"}),"\n",(0,i.jsxs)(n.p,{children:["When serving the achievements API, Paima Engine will attempt to use the ",(0,i.jsx)(n.code,{children:"achievements"})," export with type ",(0,i.jsx)(n.code,{children:"Promise<AchievementMetadata>"})," from your ",(0,i.jsx)(n.code,{children:"packaged/endpoints.cjs"}),", if it exists."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'// api/src/index.ts\nconst achievements: Promise<AchievementMetadata> = Promise.resolve({\n    game: {\n        id: "example",\n    },\n    list: [\n        {\n            name: "finish-chapter-1",\n            displayName: "Over The River",\n            description: "Finish Chapter 1.",\n        },\n        {\n            name: "finish-chapter-2",\n            displayName: "Through The Woods",\n            description: "Finish Chapter 2.",\n        },\n    ],\n});\n\nexport default RegisterRoutes;  // The usual default export.\n// highlight-next-line\nexport { achievements };  // Include this to enable the achievement API.\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Achievement metadata uses types defined in ",(0,i.jsx)(n.a,{href:"/home/PRCs/prc-1",children:"PRC-1"})," as well as the following:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"/** The type of the `achievements` export of `endpoints.cjs`. */\nexport interface AchievementMetadata {\n  /** Game ID, name, and version. */\n  game: Game;\n  /** Achievement types. */\n  list: Achievement[];\n  /**\n   * Per-language overrides for achievement display names and descriptions.\n   * Falls back to base definition whenever absent.\n   */\n  languages?: {\n    [language: string]: {\n      [name: string]: {\n        displayName?: string;\n        description?: string;\n      };\n    };\n  };\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["TypeScript definitions for ",(0,i.jsx)(n.code,{children:"AchievementMetadata"})," and ",(0,i.jsx)(n.a,{href:"/home/PRCs/prc-1",children:"PRC-1"})," can be imported from ",(0,i.jsx)(n.code,{children:"@paima/utils-backend"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import type { AchievementMetadata, Game, Achievement } from '@paima/utils-backend';\n"})}),"\n",(0,i.jsx)(n.h2,{id:"achievement-progress",children:"Achievement progress"}),"\n",(0,i.jsxs)(n.p,{children:["Paima SDK exports ",(0,i.jsx)(n.code,{children:"pgtyped"})," queries to store and retrieve achievement progress.\nThey can be imported and used in your API or a state transition function:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// highlight-next-line\nimport { getAchievementProgress, setAchievementProgress } from '@paima/db';\n// ... other imports ...\n\nasync function wonBattle(wallet: number, blockTime: Date, dbConn: Pool): Promise<SQLUpdate[]> {\n  // Get user's current achievement progress.\n  // highlight-next-line\n  const row = (await getAchievementProgress.run({ wallet, names: ['win-10-battles'] }, dbConn))[0];\n  if (!row?.completed_date) {\n    // Not complete yet. Add one, mark completed if needed, and store it back.\n    const newProgress = (row?.progress ?? 0) + 1;\n    return [\n      // highlight-next-line\n      [setAchievementProgress, {\n        name: 'win-10-battles',\n        wallet,\n        completed_date: newProgress >= 10 ? blockTime : null,\n        progress: newProgress,\n        total: 10,\n      } satisfies ISetAchievementProgressParams],\n    ];\n  } else {\n    // Already complete. Nothing to update.\n    return [];\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Achievement progress stored this way will be served by Paima Engine's built-in\nPRC-1 implementation."})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>r});var i=t(7294);const a={},s=i.createContext(a);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);